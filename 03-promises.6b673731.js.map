{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACeC,SAASC,cAAc,SA+B/BC,iBAAiB,UA9BxB,SAA6BC,GAC3BA,EAAMC,iBAEN,MAAMC,EAAaC,OACjBN,SAASC,cAAc,uBAAuBM,OAE1CC,EAAYF,OAAON,SAASC,cAAc,sBAAsBM,OAChEE,EAASH,OAAON,SAASC,cAAc,wBAAwBM,OACrE,IAAIG,EAAcL,EAClB,IAAK,IAAIM,EAAS,EAAGA,GAAUF,EAAQE,GAAU,EAAG,CAClC,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,IAEAC,GAAQ,GAETJ,EAAY,IAGdS,MAAK,IACJrB,EAAAsB,OAAOC,QAAQ,uBAAqBV,QAAeD,SAAkBY,OAEtE,IACCxB,EAAAsB,OAAMG,QAAC,sBAASZ,QAA4BD,SAEhDA,GAAeF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\nconst formEl = document.querySelector('.form');\nfunction hendlecreatePromise(event) {\n  event.preventDefault();\n\n  const firstDelay = Number(\n    document.querySelector('input[name=\"delay\"]').value\n  );\n  const stepDelay = Number(document.querySelector('input[name=\"step\"]').value);\n  const amount = Number(document.querySelector('input[name=\"amount\"]').value);\n  let secondSteps = firstDelay;\n  for (let number = 1; number <= amount; number += 1) {\n    const promise = new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve();\n        } else {\n          reject();\n        }\n      }, secondSteps);\n    });\n    promise\n      .then(() =>\n        Notify.success(`✅ Fulfilled promise ${number} in ${secondSteps}ms`)\n      )\n      .catch(() =>\n        Notify.failure(`❌ Rejected promise ${number} in ${secondSteps}ms`)\n      );\n    secondSteps += stepDelay;\n  }\n}\nformEl.addEventListener('submit', hendlecreatePromise);\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","firstDelay","Number","value","stepDelay","amount","secondSteps","number","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.6b673731.js.map"}